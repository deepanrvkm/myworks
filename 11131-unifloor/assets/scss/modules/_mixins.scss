@import  "_variables"; 
 
//-------Border style------//@include border-styles($border-col, 1px);
@mixin border-styles($color, $width) {
  border: {
    color: $color;
    width: $width;
    style: solid;
  }
}

//-------Transition------//@include transition(all, 0.3s, ease-in-out); 
 @mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

//-------Transform-scale------//@include transform-scale(1);
@mixin transform-scale($val){
    -moz-transform: scale($val);
    -webkit-transform: scale($val);
    -o-transform: scale($val);
    -ms-transform: scale($val);
    transform: scale($val);
}

//-------Transform-translate Y------//@include transform-translatey(-50%);
@mixin transform-translatey($val){
    -webkit-transform: translateY($val);
    -moz-transform   : translateY($val);
    -o-transform     :translateY($val);
    -ms-transform    :translateY($val);
    transform        : translateY($val);
}

//-------Transform-translate X------//@include transform-translatex(-50%);
@mixin transform-translatex($val){ 
    -webkit-transform: translateX($val);
    -moz-transform   : translateX($val);
    -o-transform     :translateX($val);
    -ms-transform    :translateX($val);
    transform        : translateX($val);
}

//-------Transform-rotate------//@include transform-rotate(50);
@mixin transform-rotate($val){
    @if($val != null){
        -webkit-transform: rotate($val + deg) ;
        -moz-transform   : rotate($val + deg) ;
        -o-transform     : rotate($val + deg) ;
        -ms-transform    : rotate($val + deg) ;
        transform        : rotate($val + deg) ;
    }
}

//-------Transform--origin------//@include transform-origin(10);
@mixin transform-origin($val) {
  -webkit-transform-origin: $val;
  -moz-transform-origin: $val;
  -ms-transform-origin: $val;
  transform-origin: $val;
}

//-------border-radius------//@include border-radius(3px);
@mixin border-radius($radius) {
    -moz-border-radius:    $radius;
    -webkit-border-radius: $radius;
    border-radius:         $radius;
}

//-------Position------//@include position(0, $left: 0);
@mixin position ($top: auto, $right: auto, $bottom: auto, $left: auto) { 
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

// --Gradient------//@linear-gradient(#CCC, #F0F);
@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor));
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

// --Box Shadow------//@include box-shadow(0px, 7px, 21px, 0px, rgba(222, 222, 222, 0.75));
@mixin box-shadow($horizontal, $vertical, $blur, $spread, $color, $inset: false) {
   @if $inset {
       -webkit-box-shadow:inset $horizontal $vertical $blur $spread  $color;
       -moz-box-shadow:inset $horizontal $vertical $blur $spread  $color;
       box-shadow:inset $horizontal $vertical $blur $spread $color;
   } @else {
       -webkit-box-shadow: $horizontal $vertical $blur $spread  $color;
       -moz-box-shadow: $horizontal $vertical $blur $spread  $color; 
       box-shadow: $horizontal $vertical $blur $spread $color;
   }
}


// Flexbox display
//@include flexbox();
@mixin flexbox() { 
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
//@include flex($values);
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
//@include flex-direction($direction);
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
//@include flex-wrap($wrap);
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
//@include flex-flow($flow);
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
//@include order($val);
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
//@include flex-grow($grow);
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
//@include flex-shrink($shrink);
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
//@include flex-basis($width);
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
//@include justify-content($justify);
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
//@include align-content($align);
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
//@include align-items($align);
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
//@include align-self($align);
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}